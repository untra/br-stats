// Generated by CoffeeScript 1.9.3
(function() {
  $(document).ready(function() {
    var HEIGHT, MARGIN, PLAYERS, TURNS, UPLOADS, WIDTH, X, Y, change, civdata, civlines, civs, hoverformat, indices, initalize, path, rankings, remaining, svg, to_array, to_hash, to_numbers, toggle;
    MARGIN = {
      TOP: 20,
      RIGHT: 80,
      BOTTOM: 30,
      LEFT: 50
    };
    WIDTH = 1370 - MARGIN.LEFT - MARGIN.RIGHT;
    HEIGHT = 750 - MARGIN.TOP - MARGIN.BOTTOM;
    TURNS = 70;
    UPLOADS = 3;
    PLAYERS = 61;
    X = d3.scale.linear().range([0, WIDTH]);
    Y = d3.scale.linear().range([HEIGHT, 0]).domain([PLAYERS, 1]);
    console.log("'Sup kid. Good on you for looking at the console. Doesn't say much, but it means you care. <3 untra");
    svg = d3.select('#linechart').append('svg').attr('width', WIDTH + MARGIN.LEFT + MARGIN.RIGHT).attr('height', HEIGHT + MARGIN.TOP + MARGIN.BOTTOM).append('g').attr('transform', 'translate(' + MARGIN.LEFT + ',' + MARGIN.TOP + ')');
    rankings = {};
    civdata = {};
    civs = [];
    indices = [];
    remaining = 2;
    toggle = null;
    civlines = null;
    to_hash = function(data, name) {
      var d, hash, j, len;
      hash = {};
      for (j = 0, len = data.length; j < len; j++) {
        d = data[j];
        hash[d[name]] = d;
      }
      return hash;
    };
    to_array = function(data, name) {
      var arr, d, i, j, len;
      arr = [];
      for (i = j = 0, len = data.length; j < len; i = ++j) {
        d = data[i];
        arr[i] = d[name];
      }
      return arr;
    };
    to_numbers = function(data) {
      var arr, d, i, j, len;
      arr = [];
      for (i = j = 0, len = data.length; j < len; i = ++j) {
        d = data[i];
        if (!isNaN(parseInt(+d))) {
          arr.push(+d);
        }
      }
      return arr;
    };
    path = function(d) {
      return indices.map(function(p) {
        return [X(p), Y(d[p])];
      });
    };
    hoverformat = function(d, i) {
      return "\#" + d[i] + " " + d.name;
    };
    change = function(d) {
      var checked, lines, value;
      checked = toggle.select("[name=" + d.name + "]").property('checked');
      value = checked ? null : 'hidden';
      lines = civlines.filter(function(p) {
        return p.name === d.name;
      });
      return lines.style('visibility', value);
    };
    initalize = function() {
      var axes, i, j, len, line, xAxis, xaxis, yAxis, yaxis;
      X.domain([0, TURNS]);
      line = d3.svg.line();
      xAxis = d3.svg.axis().scale(X).orient('bottom').tickValues(indices).tickSubdivide(0);
      yAxis = d3.svg.axis().scale(Y).orient('left').ticks(PLAYERS);
      axes = svg.append("g").attr("class", "axes");
      yaxis = axes.append("g").attr("class", "axis").attr("transform", "translate(0," + HEIGHT + ")").call(xAxis);
      xaxis = axes.append("g").attr("class", "axis").call(yAxis);
      xaxis.selectAll('.tick line').attr('x2', function(d) {
        return WIDTH;
      });
      yaxis.selectAll('.tick line').attr('y1', 0).attr('y2', -HEIGHT);
      civlines = svg.append('g').attr('class', 'civlines').selectAll('g').data(rankings).enter().append('g').attr('name', function(d) {
        return d.name;
      });
      civlines.append('path').attr('class', 'line').attr('d', function(d) {
        return line(path(d));
      }).style('stroke', function(d) {
        return civdata[d.name].primary;
      });
      for (j = 0, len = indices.length; j < len; j++) {
        i = indices[j];
        civlines.append('circle').attr('cx', function(d) {
          return X(i);
        }).attr('cy', function(d) {
          return Y(d[i]);
        }).attr('r', 4).style('fill', function(d) {
          return civdata[d.name].secondary;
        }).style('stroke', function(d) {
          return civdata[d.name].primary;
        }).on('mouseover', function(d) {
          var x, y;
          x = +(d3.select(this).attr('cx'));
          y = +(d3.select(this).attr('cy'));
          d3.select(this.parentNode).append('text').attr('x', x + 10).attr('y', y + 4).text(hoverformat(d, i));
        }).on('mouseout', function(d) {
          var selection;
          selection = d3.select(this.parentNode).selectAll('text').remove();
        });
      }
      toggle.append('input').attr('type', 'checkbox').property('checked', true).attr('name', function(d) {
        return d.name;
      }).on('change', function(d) {
        return change(d);
      });
      return toggle.append('img').attr('src', function(d) {
        return d.flair;
      }).attr('title', function(d) {
        return d.name;
      }).attr('width', 32).attr('height', 32);
    };
    d3.csv('civs.csv', function(data) {
      toggle = d3.select('#civtoggle').selectAll('label').data(data).enter().append('label');
      civdata = to_hash(data, 'name');
      civs = to_array(data, 'name');
      if (!--remaining) {
        return initalize();
      }
    });
    return d3.csv('rankings.csv', (function(_this) {
      return function(data) {
        rankings = data;
        indices = to_numbers(Object.keys(data[0]));
        TURNS = d3.max(indices);
        if (!--remaining) {
          return initalize();
        }
      };
    })(this));
  });

  return;

}).call(this);
